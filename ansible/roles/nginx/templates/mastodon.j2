map $http_upgrade $connection_upgrade {
	default upgrade;
	''	close;
}

server {
	listen 80;
	listen [::]:80;
	server_name {{ mastodon_domain }};
	add_header Heartbleed "NO; see http://heartbleedheader.com";
	access_log /var/log/nginx/{{ mastodon_domain }}-access.log;
	error_log /var/log/nginx/{{ mastodon_domain }}-error.log;
	root {{ mastodon_public }};

	location /.well-known/acme-challenge/ { allow all; }
	location / {
		return 301 https://{{ mastodon_domain }}$request_uri;
	}
}

server {
	listen 443 ssl http2;
	listen [::]:443 ssl http2;
	server_name {{ mastodon_domain }};

	ssl_certificate /etc/letsencrypt/live/{{ mastodon_domain }}/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/{{ mastodon_domain }}/privkey.pem;

	access_log /var/log/nginx/{{ mastodon_domain }}-access.log;
	error_log /var/log/nginx/{{ mastodon_domain }}-error.log;

	# Ref: https://content-security-policy.com
	add_header Content-Security-Policy "default-src 'self'; img-src 'self'{{ media_s3_url }} data:; style-src 'self' 'unsafe-inline'; connect-src 'self' wss://{{ mastodon_domain }}/; media-src 'self'{{ media_s3_url }}";
	add_header Heartbleed "NO; see http://heartbleedheader.com";
	add_header Referrer-Policy "strict-origin-when-cross-origin";
	add_header Strict-Transport-Security "max-age=15552000; includeSubDomains; preload";
	add_header X-Clacks-Overhead "GNU Terry Pratchett";

	root {{ mastodon_public }};

	# While upstream enables gzip, we don't:
	#
	# 1) Serving gzip'd content over SSL has been subject to
	# interesting side-channel attacks that can reveal user
	# information (see: http://www.breachattack.com).
	#
	# 2) We're marking most of the large assets as immutable, so those
	# things will be (hypothetically) served one time ever and then
	# cached.
	#
	# 3) The remaining content that will be updated regularly is
	# mainly tiny snippets of text, aka toots. That's probably not
	# worth the overhead of compressing.

	client_max_body_size 0;

	location / {
		try_files $uri @proxy;
	}

	# Don't cache the sw.js service worker (as of v1.5.0)
	location = /assets/sw.js {
	}

	# /system/ stuff isn't relevant if you serve it from S3, but
	# no harm in covering it in either case.
	location ~ ^/(assets|system/media_attachments/files|system/accounts/avatars) {
		add_header Cache-Control "public, max-age=31536000, immutable";
	}

	location @proxy {
		proxy_set_header   Host	     $http_host;
		proxy_set_header   X-Real-IP $remote_addr;
		proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header   X-Forwarded-Proto $scheme;

		proxy_pass_header Server;

		proxy_pass	   http://localhost:3000;
		proxy_buffering off;
		proxy_redirect off;
		proxy_http_version 1.1;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection $connection_upgrade;

		tcp_nodelay on;
	}

	location /api/v1/streaming {
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Proto https;

		proxy_pass http://localhost:4000;
		proxy_buffering off;
		proxy_redirect off;
		proxy_http_version 1.1;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection $connection_upgrade;

		tcp_nodelay on;
	}

	error_page 500 501 502 503 504 /500.html;
}
