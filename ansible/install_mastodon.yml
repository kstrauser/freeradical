---
- hosts: mastodon
  vars:
    # Where you'd like to install Mastodon. If you change this, update
    # docker-mastodon.service and files/Makefile.
    mastodon_private: /var/lib/mastodon
    # Where you'd like to put the public Mastodon files. NOT THE SAME
    # AS mastodon_private!!! If you change this, update the Nginx
    # config files' "root" value to point to your new location.
    mastodon_public: /var/www/mastodon
    # Where PostgreSQL lives
    pg_dir: /var/lib/postgresql
    
  tasks:
    - name: Format the block device
      filesystem:
        dev: "{{ block_device_file }}"
        fstype: ext4
      when: block_device_file is defined

    - name: Make the PostgreSQL directory
      file:
        path: "{{ pg_dir }}"
        state: directory

    - name: Mount the PostgreSQL data volume
      mount:
        fstype: ext4
        opts: defaults,nofail,discard
        src: "{{ block_device_file }}"
        name: "{{ pg_dir }}"
        state: mounted
      when: block_device_file is defined

    - name: Add certbot repo
      apt_repository:
        repo: ppa:certbot/certbot

    - name: Update all packages
      apt:
        update_cache: yes
        upgrade: dist

    - name: Install required packages
      apt:
        name: "{{ item }}"
        state: present
      with_items:
        - certbot
        - docker.io
        - make
        - nginx
        - ntp
        - postgresql-9.5
        - redis-server

    - name: Install newer docker-compose than is in the Ubuntu repo
      get_url:
        url: https://github.com/docker/compose/releases/download/1.11.2/docker-compose-Linux-x86_64
        dest: /usr/local/bin/docker-compose
        mode: 0755

    - name: Create the mastodon user
      user:
        name: "{{ mastodon_user }}"
        state: present
        comment: "Mastodon"
        generate_ssh_key: yes
        ssh_key_comment: "{{ mastodon_user }}@{{ ansible_host }}"

    - name: Make the Mastodon directory
      file:
        path: "{{ mastodon_private }}"
        state: directory
        owner: "{{ mastodon_user }}"
        group: "{{ mastodon_user }}"

    - name: Clone the git repo
      become: true
      become_user: "{{ mastodon_user }}"
      git:
        dest: "{{ mastodon_private }}"
        repo: "{{ mastodon_repo }}"
        version: "{{ mastodon_version }}"
      register: git_clone

    - name: Make the assets directory
      file:
        path: "{{ mastodon_public }}/assets"
        state: directory
        
    - name: Make the system directory
      file:
        path: "{{ mastodon_public }}/system"
        state: directory

    - name: Build Mastodon
      shell: docker-compose build
      args:
        chdir: "{{ mastodon_private }}"
      when: git_clone.changed

    - name: Copy /etc files
      copy:
        src: files/as-is/etc/
        dest: /etc/

    - name: Copy templated files
      template:
        backup: yes
        src: files/templates/{{ item }}
        dest: /{{ item }}
      with_items:
        - etc/nginx/sites-available/default
        - etc/nginx/sites-available/mastodon.conf-80_and_443
        - etc/nginx/sites-available/mastodon.conf-80only

    - name: Link the new Nginx default
      file:
        src: /etc/nginx/sites-available/default
        dest: /etc/nginx/sites-enabled/default
        force: yes
        state: link

    - name: Check if Mastodon is configured
      stat:
        path: "{{ mastodon_private }}/.env.production"
      register: prod_config

    - name: Run DB migrations
      when: prod_config.stat.exists and git_clone.changed
      shell: docker-compose run --rm web rails db:migrate
      args:
        chdir: "{{ mastodon_private }}"
      
    - name: Compile assets
      when: prod_config.stat.exists and git_clone.changed
      shell: docker-compose run --rm web rails assets:precompile
      args:
        chdir: "{{ mastodon_private }}"
      
    - name: Start the Mastodon service
      when: prod_config.stat.exists
      systemd:
        name: docker-mastodon
        state: started
        enabled: yes

    - name: "Check if Let's Encrypt is configured"
      stat:
        path: /etc/letsencrypt/live/{{ mastodon_domain }}
      register: letsencrypt_config

    - name: "Install the minimal Nginx config to bootstrap Let's Encrypt"
      file:
        src: /etc/nginx/sites-available/mastodon.conf-80only
        dest: /etc/nginx/sites-available/mastodon.conf
        force: yes
        state: link
      when: not letsencrypt_config.stat.exists

    - name: Reload the Nginx service
      systemd:
        name: nginx
        state: reloaded
      when: not letsencrypt_config.stat.exists

    - name: "Generate Let's Encrypt certificate"
      shell: certbot certonly --webroot -d {{ mastodon_domain }} -w {{ mastodon_public }}
      when: not letsencrypt_config.stat.exists

    - name: Install the full Nginx config
      file:
        src: /etc/nginx/sites-available/mastodon.conf-80_and_443
        dest: /etc/nginx/sites-enabled/mastodon.conf
        force: yes
        state: link
      register: installed_prod_config

    - name: Reload the Nginx service
      systemd:
        name: nginx
        state: reloaded
      when: installed_prod_config.changed

    - name: Install helper Makefile
      copy:
        src: files/mastodon/Makefile
        dest: "{{ mastodon_private }}/Makefile"

    - name: Configure maintenance cron job
      cron:
        name: Mastodon maintenance
        minute: "0"
        hour: "22"
        job: make -f {{ mastodon_private }}/Makefile cron

    - name: Configure certbot cron job
      cron:
        name: Certificate renewal maintenance
        minute: "47"
        hour: "1"
        weekday: "0"
        job: '/usr/bin/certbot renew --post-hook "/usr/sbin/service nginx reload"'
